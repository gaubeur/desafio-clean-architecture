package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/gaubeur/desafio-posgraduacao-golang-fullcycle/desafio-clean-architecture/graph/model"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	order, err := r.OrderDB.Create(input.CustomerName, input.ProductName, int64(input.Quantity))
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:           fmt.Sprintf("%d", order.ID),
		CustomerName: order.Customer_name,
		ProductName:  order.Product_name,
		Quantity:     input.Quantity,
		CreatedAt:    order.CreatedAt.Format("2006-01-02T15:04:05Z07:00"),
	}, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	orders, err := r.OrderDB.ListOrders()
	if err != nil {
		return nil, err
	}

	var orderModel []*model.Order
	for _, o := range orders {
		orderModel = append(orderModel, &model.Order{
			ID:           fmt.Sprintf("%d", o.ID),
			CustomerName: o.Customer_name,
			ProductName:  o.Product_name,
			Quantity:     int32(o.Quantity),
			CreatedAt:    o.CreatedAt.Format("2006-01-02T15:04:05Z07:00"),
		})
	}

	return orderModel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) ID(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *queryResolver) CustomerName(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: CustomerName - customer_name"))
}
func (r *queryResolver) ProductName(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: ProductName - product_name"))
}
func (r *queryResolver) Quantity(ctx context.Context) (int32, error) {
	panic(fmt.Errorf("not implemented: Quantity - quantity"))
}
func (r *queryResolver) CreatedAt(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}
*/
